{
  "swagger": "2.0",
  "info": {
    "description": "This is the server side for MyDiary web app. MyDiary is an online journal where users can pen down their thoughts and feelings. \n You can find the app on [MyDiary](http://Alameen688.github.io/MyDiary/UI).",
    "version": "1.0.0",
    "title": "MyDiary API",
    "contact": {
      "email": "ogundiran12@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "mydiaryoxygen.herokuapp.com",
  "basePath": "/api/v1",
  "tags": [
    {
      "name": "auth",
      "description": "User authentication"
    },
    {
      "name": "entry",
      "description": "Diary entry"
    }
  ],
  "schemes": [
    "http"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "register a new user",
        "description": "",
        "operationId": "userCreate",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "User object that needs to be created",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/User"
            }
          },
          "400": {
            "description": "Validation exception"
          }
        }
      }
    },
    "/auth/login": {
      "post": {
        "tags": [
          "auth"
        ],
        "summary": "log in an existing user",
        "description": "",
        "operationId": "userLogin",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/LoginResponse"
            }
          },
          "400": {
            "description": "Credentials do not match"
          }
        }
      }
    },
    "/entries": {
      "get": {
        "tags": [
          "entry"
        ],
        "summary": "get all entries by a user",
        "description": "This can only be done by the logged in user.",
        "operationId": "getAll",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EntryResponse"
              }
            }
          },
          "401": {
            "description": "You do not have access to this resource"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "entry"
        ],
        "summary": "add new entry",
        "description": "This can only be done by the logged in user.",
        "operationId": "create",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created entry object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntryResponse"
            }
          },
          "400": {
            "description": "Validation error"
          },
          "401": {
            "description": "You do not have access to this resource"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/entries/{entry_id}": {
      "get": {
        "tags": [
          "entry"
        ],
        "summary": "get diary entry by id",
        "description": "For valid response try integer IDs",
        "operationId": "entry.getById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "entry_id",
            "in": "path",
            "description": "ID of entry that needs to be fetched",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntryResponse"
            }
          },
          "400": {
            "description": "Invalid entry id"
          },
          "404": {
            "description": "Entry not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "put": {
        "tags": [
          "entry"
        ],
        "summary": "update entry by id",
        "description": "This can only be done by the logged in user.",
        "operationId": "entry.Update",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "entry_id",
            "in": "path",
            "description": "id of entry that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Updated entry object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EntryRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EntryResponse"
            }
          },
          "400": {
            "description": "Invalid entry id"
          },
          "404": {
            "description": "Entry not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "entry"
        ],
        "summary": "delete diary entry by id",
        "description": "For valid response try integer IDs with positive integer value.",
        "operationId": "entry.Delete",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "entry_id",
            "in": "path",
            "description": "id of the entry that needs to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "204": {
            "description": "Success No content"
          },
          "400": {
            "description": "Invalid entry id"
          },
          "404": {
            "description": "Entry not found"
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    }
  },
  "securityDefinitions": {
    "token": {
      "type": "apiKey",
      "name": "token",
      "in": "header"
    }
  },
  "definitions": {
    "EntryResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "Response status",
          "enum": [
            "success",
            "error"
          ]
        },
        "data": {
          "$ref": "#/definitions/Entry"
        }
      },
      "xml": {
        "name": "EntryResponse"
      }
    },
    "Entry": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "example": "entry title"
        },
        "content": {
          "type": "string"
        },
        "user_id": {
          "type": "integer",
          "format": "int64"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "Entry"
      }
    },
    "EntryRequest": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "content": {
          "type": "string"
        }
      },
      "xml": {
        "name": "EntryRequest"
      }
    },
    "UserRequest": {
      "type": "object",
      "properties": {
        "fulname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "UserRequest"
      }
    },
    "Login": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Login"
      }
    },
    "LoginResponse": {
      "type": "object",
      "properties": {
        "fullname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      },
      "xml": {
        "name": "LoginResponse"
      }
    },
    "User": {
      "type": "object",
      "required": [
        "fullname",
        "email",
        "password"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "fullname": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "UserResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "description": "response status",
          "enum": [
            "success",
            "error"
          ]
        },
        "data": {
          "type": "array",
          "xml": {
            "name": "data",
            "wrapped": true
          },
          "items": {
            "$ref": "#/definitions/User"
          }
        }
      },
      "xml": {
        "name": "UserResponse"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}